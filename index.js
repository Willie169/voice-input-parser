const { toWords } = require('number-to-words');
const ASCII = new Map([["Space"," "],["Exclamation mark","!"],["Double quotes","\""],["Speech marks","\""],["Number","#"],["Dollar","$"],["Per cent sign","%"],["Ampersand","&"],["Single quote","'"],["Open parenthesis","("],["Open bracket","("],["Close parenthesis",")"],["Close bracket",")"],["Asterisk","*"],["Plus","+"],["Comma",","],["Hyphen","-"],["Period", "."],["Dot","."],["Full stop","."],["Slash","/"],["Divide","/"],["Zero","0"],["One","1"],["Two","2"],["Three","3"],["Four","4"],["Five","5"],["Six","6"],["Seven","7"],["Eight","8"],["Nine","9"],["Colon",":"],["Semicolon",";"],["Less than","<"],["Open angled bracket","<"],["Equals","="],["Greater than",">"],["Close angled bracket",">"],["Question mark","?"],["At symbol","@"],["Opening brace","{"],["Vertical bar","|"],["Closing brace","}"],["Equivalency sign - tilde","~"],["Delete",""],["Euro sign","€"],[""," "],["Single low-9 quotation mark","‚"],["Latin small letter f with hook","ƒ"],["Double low-9 quotation mark","„"],["Horizontal ellipsis","…"],["Dagger","†"],["Double dagger","‡"],["Modifier letter circumflex accent","ˆ"],["Per mille sign","‰"],["Latin capital letter S with caron","Š"],["Single left-pointing angle quotation","‹"],["Latin capital ligature OE","Œ"],[" "," "],["Latin capital letter Z with caron","Ž"],[" "," "],[" "," "],["Left single quotation mark","‘"],["Right single quotation mark","’"],["Left double quotation mark","“"],["Right double quotation mark","”"],["Bullet","•"],["En dash","–"],["Em dash","—"],["Small tilde","˜"],["Trade mark sign","™"],["Latin small letter S with caron","š"],["Single right-pointing angle quotation mark","›"],["Latin small ligature oe","œ"],[" "," "],["Latin small letter z with caron","ž"],["Latin capital letter Y with diaeresis","Ÿ"],["Non-breaking space"," "],["Inverted exclamation mark","¡"],["Cent sign","¢"],["Pound sign","£"],["Currency sign","¤"],["Yen sign","¥"],["Pipe,Broken vertical bar","¦"],["Section sign","§"],["Spacing diaeresis - umlaut","¨"],["Copyright sign","©"],["Feminine ordinal indicator","ª"],["Left double angle quotes","«"],["Not sign","¬"],["Soft hyphen","­"],["Registered trade mark sign","®"],["Spacing macron - overline","¯"],["Degree sign","°"],["Plus-or-minus sign","±"],["Superscript two - squared","²"],["Superscript three - cubed","³"],["Acute accent - spacing acute","´"],["Micro sign","µ"],["Pilcrow sign - paragraph sign","¶"],["Middle dot - Georgian comma","·"],["Spacing cedilla","¸"],["Superscript one","¹"],["Masculine ordinal indicator","º"],["Right double angle quotes","»"],["Fraction one quarter","¼"],["Fraction one half","½"],["Fraction three quarters","¾"],["Inverted question mark","¿"],["Latin capital letter A with grave","À"],["Latin capital letter A with acute","Á"],["Latin capital letter A with circumflex","Â"],["Latin capital letter A with tilde","Ã"],["Latin capital letter A with diaeresis","Ä"],["Latin capital letter A with ring above","Å"],["Latin capital letter AE","Æ"],["Latin capital letter C with cedilla","Ç"],["Latin capital letter E with grave","È"],["Latin capital letter E with acute","É"],["Latin capital letter E with circumflex","Ê"],["Latin capital letter E with diaeresis","Ë"],["Latin capital letter I with grave","Ì"],["Latin capital letter I with acute","Í"],["Latin capital letter I with circumflex","Î"],["Latin capital letter I with diaeresis","Ï"],["Latin capital letter ETH","Ð"],["Latin capital letter N with tilde","Ñ"],["Latin capital letter O with grave","Ò"],["Latin capital letter O with acute","Ó"],["Latin capital letter O with circumflex","Ô"],["Latin capital letter O with tilde","Õ"],["Latin capital letter O with diaeresis","Ö"],["Multiplication sign","×"],["Latin capital letter O with slash","Ø"],["Latin capital letter U with grave","Ù"],["Latin capital letter U with acute","Ú"],["Latin capital letter U with circumflex","Û"],["Latin capital letter U with diaeresis","Ü"],["Latin capital letter Y with acute","Ý"],["Latin capital letter THORN","Þ"],["Latin small letter sharp s - ess-zed","ß"],["Latin small letter a with grave","à"],["Latin small letter a with acute","á"],["Latin small letter a with circumflex","â"],["Latin small letter a with tilde","ã"],["Latin small letter a with diaeresis","ä"],["Latin small letter a with ring above","å"],["Latin small letter ae","æ"],["Latin small letter c with cedilla","ç"],["Latin small letter e with grave","è"],["Latin small letter e with acute","é"],["Latin small letter e with circumflex","ê"],["Latin small letter e with diaeresis","ë"],["Latin small letter i with grave","ì"],["Latin small letter i with acute","í"],["Latin small letter i with circumflex","î"],["Latin small letter i with diaeresis","ï"],["Latin small letter eth","ð"],["Latin small letter n with tilde","ñ"],["Latin small letter o with grave","ò"],["Latin small letter o with acute","ó"],["Latin small letter o with circumflex","ô"],["Latin small letter o with tilde","õ"],["Latin small letter o with diaeresis","ö"],["Division sign","÷"],["Latin small letter o with slash","ø"],["Latin small letter u with grave","ù"],["Latin small letter u with acute","ú"],["Latin small letter u with circumflex","û"],["Latin small letter u with diaeresis","ü"],["Latin small letter y with acute","ý"],["Latin small letter thorn","þ"],["Latin small letter y with diaeresis","ÿ"]);
function parseAscii(arr) {
  let arr1=[];
  for (let a=0; a<arr.length; a++) {
    outer: for (let i=1; i<10; i++) {
      let name=arr.slice(a, a+i);
       for (let [mapKey, value] of ASCII) {
         if (mapKey.replace(/[^a-zA-Z]/,'').toLowerCase() === name.replace(/[^a-zA-Z]/,'').toLowerCase()) {
          arr1.push(value);
          a=a+i-1;
          break outer;
        }
      }
    }
    arr1.push(arr[a]);
  }
  return arr1.join(' ');
}
function voiceInputParser(input) {
  input=input.trim().toLowerCase().replace(/\d/g, match => toWord(match)).replace(/[^a-z-]/,' ').replace(/ +/,' ');
  if (input.substring(0,input.indexOf(" "))==="space") input=" "+input.substring(input.indexOf(" ")+1);
  else if (input.substring(0,input.indexOf(" ",input.indexOf(" ")+1))==="continuous") input=input.substring(input.indexOf(" ",input.indexOf(" ")+1)+1);
  else if (input.substring(0,input.indexOf(" "))==="lowercase") input=input.substring(input.indexOf(" ")+1);
  else if (input.substring(0,input.indexOf(" "))==="headline") input=input.substring(input.indexOf(" ")+1).substring(0,1).toUpperCase()+input.substring(input.indexOf(" ")+1).substring(1);
  else if (input.substring(0,input.indexOf(" "))==="uppercase") input=input.substring(input.indexOf(" ")+1).substring(0,input.substring(input.indexOf(" ")+1).indexOf(" ")).toUpperCase()+input.substring(input.indexOf(" ")+1).substring(1);
  else input=input.substring(0,1).toUpperCase()+input.substring(1);
  input=input.replace(/headline \S+ /g, match => match.substring(0,1).toUpperCase()+match.substring(1)).replace(/uppercase \S+ /g, match => match.toUpperCase());
  input=parseAscii(input.split()).replace(/parenthesis \S+ parenthesis/g, match => match.split(' ').map((name) => { for (let [mapKey, value] of ASCII) { if (value === name) return mapKey.toLowerCase; } return name; }).join(' ')).replace(/Parenthesis \S+ parenthesis/g, match => match.split(' ').map((name) => { for (let [mapKey, value] of ASCII) { if (value === name) return mapKey.toLowerCase; } return name; }).join(' ').substring(0,1).toUpperCase()+match.split(' ').map((name) => { for (let [mapKey, value] of ASCII) { if (value === name) return mapKey.toLowerCase; } return name; }).join(' ').substring(1)).replace(/PARENTHESIS \S+ parenthesis/g, match => match.split(' ').map((name) => { for (let [mapKey, value] of ASCII) { if (value === name) return mapKey.toLowerCase; } return name; }).join(' ').toUpperCase()).replace(/parenthesis parenthesis/, "parenthesis").replace(/Parenthesis parenthesis/, "Parenthesis").replace(/PARENTHESIS parenthesis/, "PARENTHESIS");
  return input;
}
